{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "歡迎使用 Colaboratory",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/TheGreatCodingEmperor/8QueenCSharp/blob/master/2021%2012%2005%20Self%20Learn%20-%20Linear%20Regression\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "in9DSAkt29lp"
      },
      "source": [
        "# 2021 12 05 Tensorflow"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LNbMvCBPd3Nb",
        "outputId": "a2a5d23d-88e0-47e8-b8f5-e4c9b23fcfa7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "from __future__ import absolute_import, division, print_function\n",
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "rng = np.random\n",
        "\n",
        "# Parameters.\n",
        "learning_rate = 0.01\n",
        "training_steps = 10000\n",
        "display_step = 500\n",
        "\n",
        "# Training Data.\n",
        "X = np.array([3.3,4.4,5.5,6.71,6.93,4.168,9.779,6.182,7.59,2.167,\n",
        "              7.042,10.791,5.313,7.997,5.654,9.27,3.1])\n",
        "Y = np.array([1.7,2.76,2.09,3.19,1.694,1.573,3.366,2.596,2.53,1.221,\n",
        "              2.827,3.465,1.65,2.904,2.42,2.94,1.3])\n",
        "\n",
        "# Weight and Bias, initialized randomly.\n",
        "W = tf.Variable(rng.randn(), name=\"weight\")\n",
        "b = tf.Variable(rng.randn(), name=\"bias\")\n",
        "\n",
        "# Linear regression (Wx + b).\n",
        "def linear_regression(x):\n",
        "    return W * x + b\n",
        "\n",
        "# Mean square error.\n",
        "def mean_square(y_pred, y_true):\n",
        "    return tf.reduce_mean(tf.square(y_pred - y_true))\n",
        "\n",
        "# Stochastic Gradient Descent Optimizer.\n",
        "optimizer = tf.optimizers.SGD(learning_rate)\n",
        "\n",
        "# Optimization process. \n",
        "def run_optimization():\n",
        "    # Wrap computation inside a GradientTape for automatic differentiation.\n",
        "    with tf.GradientTape() as g:\n",
        "        pred = linear_regression(X)\n",
        "        loss = mean_square(pred, Y)\n",
        "\n",
        "    # Compute gradients.\n",
        "    gradients = g.gradient(loss, [W, b])\n",
        "    \n",
        "    # Update W and b following gradients.\n",
        "    optimizer.apply_gradients(zip(gradients, [W, b]))\n",
        "\n",
        "# Run training for the given number of steps.\n",
        "for step in range(1, training_steps + 1):\n",
        "    # Run the optimization to update W and b values.\n",
        "    run_optimization()\n",
        "\n",
        "    if step % display_step == 0:\n",
        "        pred = linear_regression(X)\n",
        "        loss = mean_square(pred, Y)\n",
        "        print(\"step:\",step,\"loss:\",loss.numpy(),\"W:\",W.numpy(),\"b:\",b.numpy())"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "step: 500 loss: 0.18494996 W: 0.32232377 b: 0.29764926\n",
            "step: 1000 loss: 0.15659325 W: 0.2726026 b: 0.65015\n",
            "step: 1500 loss: 0.15409836 W: 0.2578543 b: 0.7547086\n",
            "step: 2000 loss: 0.15387887 W: 0.25347978 b: 0.78572214\n",
            "step: 2500 loss: 0.15385956 W: 0.25218216 b: 0.7949217\n",
            "step: 3000 loss: 0.15385783 W: 0.25179726 b: 0.7976505\n",
            "step: 3500 loss: 0.15385768 W: 0.2516831 b: 0.7984598\n",
            "step: 4000 loss: 0.1538577 W: 0.25164926 b: 0.7986996\n",
            "step: 4500 loss: 0.15385768 W: 0.25163934 b: 0.79877\n",
            "step: 5000 loss: 0.15385771 W: 0.25163665 b: 0.7987891\n",
            "step: 5500 loss: 0.15385771 W: 0.25163665 b: 0.7987891\n",
            "step: 6000 loss: 0.15385771 W: 0.25163665 b: 0.7987891\n",
            "step: 6500 loss: 0.15385771 W: 0.25163665 b: 0.7987891\n",
            "step: 7000 loss: 0.15385771 W: 0.25163665 b: 0.7987891\n",
            "step: 7500 loss: 0.15385771 W: 0.25163665 b: 0.7987891\n",
            "step: 8000 loss: 0.15385771 W: 0.25163665 b: 0.7987891\n",
            "step: 8500 loss: 0.15385771 W: 0.25163665 b: 0.7987891\n",
            "step: 9000 loss: 0.15385771 W: 0.25163665 b: 0.7987891\n",
            "step: 9500 loss: 0.15385771 W: 0.25163665 b: 0.7987891\n",
            "step: 10000 loss: 0.15385771 W: 0.25163665 b: 0.7987891\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q2hDafKtitDM",
        "outputId": "dbe545d4-f522-4d97-fce8-5b6112393ae4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        }
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "# Graphic display\n",
        "plt.plot(X, Y, 'ro', label='Original data')\n",
        "plt.plot(X, np.array(W * X + b), label='Fitted line')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VbzICmrq28ra",
        "outputId": "bb183029-ef33-4197-9924-35242e2f7217",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "import tensorflow as tf\n",
        "# Create a Tensor.\n",
        "hello = tf.constant(\"hello world\")\n",
        "print(hello)\n",
        "print(hello.numpy())"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tf.Tensor(b'hello world', shape=(), dtype=string)\n",
            "b'hello world'\n"
          ]
        }
      ]
    }
  ]
}